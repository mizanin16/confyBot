import asyncio
from datetime import datetime, timedelta
from aiogram import Bot
from bot.db.queries import get_users_for_notification, get_user_subscriptions, get_filter_details
from bot.services.event_service import EventService


async def send_notification(bot: Bot, user_id: int, message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        await bot.send_message(user_id, message)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False


async def process_notifications(bot: Bot, event_service: EventService, days_before: int, period_code: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π."""
    users = get_users_for_notification(period_code)
    target_date = (datetime.now() + timedelta(days=days_before)).strftime("%Y-%m-%d")
    sent_notifications = set()  # –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

    tasks = []
    for user_id in users:
        subscriptions = get_user_subscriptions(user_id)
        if not subscriptions:
            continue

        for sub_id, sub_name in subscriptions:
            filter_details = get_filter_details(sub_id)
            if not filter_details:
                continue

            filter_details['date'] = target_date
            events = event_service.find_events_by_filter(**filter_details)

            if events and (user_id, sub_id) not in sent_notifications:
                message = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ '{sub_name}':\n\n"
                for i, event in enumerate(events[:5], 1):
                    message += (f"{i}. {event['title']}\n"
                                f"üìÖ {event['date']}\n"
                                f"üìç {event['location']}\n\n")

                if len(events) > 5:
                    message += f"...–∏ –µ—â–µ {len(events) - 5} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
                message += f"–ß–µ—Ä–µ–∑ {days_before} –¥–Ω–µ–π."

                tasks.append(send_notification(bot, user_id, message))
                sent_notifications.add((user_id, sub_id))

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if tasks:
        await asyncio.gather(*tasks, return_exceptions=True)


async def schedule_notifications(bot: Bot, event_service: EventService):
    """–ì–∏–±–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    periods = [(30, "30d"), (14, "14d"), (7, "7d"), (3, "3d"), (1, "1d")]

    while True:
        now = datetime.now()
        # –ë–æ–ª–µ–µ –≥–∏–±–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å 9 –¥–æ 11 —É—Ç—Ä–∞)
        if 20 <= now.hour <= 21:
            for days, period in periods:
                await process_notifications(bot, event_service, days, period)
            # –°–ø–∏–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
            await asyncio.sleep(24 * 3600 - now.hour * 3600 - now.minute * 60)
        else:
            await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç