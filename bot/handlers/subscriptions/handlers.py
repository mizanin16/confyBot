import logging
from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.db.queries import delete_subscription, get_filter_details
from bot.handlers.subscriptions.utils import show_user_subscriptions
from bot.keyboards.inline_keyboards import get_main_menu_keyboard
from bot.services.event_service import EventService
from bot.db.database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()
event_service = EventService(Database())

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
EVENTS_PER_PAGE = 5


def get_paginated_keyboard(total_events: int, page: int, subscription_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    builder = InlineKeyboardBuilder()
    total_pages = (total_events + EVENTS_PER_PAGE - 1) // EVENTS_PER_PAGE

    if page > 1:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"search_sub:{subscription_id}:{page - 1}")
    if page < total_pages:
        builder.button(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"search_sub:{subscription_id}:{page + 1}")
    builder.button(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")

    builder.adjust(2 if page > 1 and page < total_pages else 1)
    return builder.as_markup()


@router.callback_query(F.data == "view_subscriptions")
async def view_subscriptions(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏'"""
    logger.info(f"User {callback.from_user.id} pressed 'view_subscriptions'")
    await show_user_subscriptions(callback)


@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    logger.info(f"User {callback.from_user.id} pressed 'back_to_main'")
    await callback.message.edit_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=get_main_menu_keyboard())
    await callback.answer()


@router.callback_query(F.data.startswith("delete_sub:"))
async def delete_subscription_handler(callback: types.CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫"""
    subscription_id = int(callback.data.split(":")[1])
    logger.info(f"User {callback.from_user.id} deleting subscription {subscription_id}")
    delete_subscription(subscription_id)
    await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
    await show_user_subscriptions(callback)


@router.callback_query(F.data.startswith("search_sub:"))
async def search_subscription_events(callback: types.CallbackQuery):
    """–ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    data = callback.data.split(":")
    subscription_id = int(data[1])
    page = int(data[2]) if len(data) > 2 else 1  # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1

    logger.info(f"User {callback.from_user.id} searching events for subscription {subscription_id}, page {page}")

    sub_details = get_filter_details(subscription_id)
    if not sub_details:
        logger.warning(f"Subscription {subscription_id} not found")
        await callback.message.edit_text("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_main_menu_keyboard())
        await callback.answer()
        return

    # –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    events = event_service.find_events_by_filter(
        subscription_name=sub_details["subscription_name"],
        category=sub_details["category"],
        date=sub_details["date"],
        cost=sub_details["cost"].replace('.', ''),
        format=sub_details["format"],
        location=sub_details["location"]
    )
    logger.info(f"Found {len(events)} events for subscription {subscription_id}")

    if not events:
        text = f"üòï –ü–æ –ø–æ–¥–ø–∏—Å–∫–µ '{sub_details['subscription_name']}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        keyboard = get_main_menu_keyboard()
    else:
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = (page - 1) * EVENTS_PER_PAGE
        end_idx = min(start_idx + EVENTS_PER_PAGE, len(events))
        paginated_events = events[start_idx:end_idx]

        text = f"üìã –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ '{sub_details['subscription_name']}' (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {(len(events) + EVENTS_PER_PAGE - 1) // EVENTS_PER_PAGE}):\n\n"
        for i, event in enumerate(paginated_events, start_idx + 1):
            text += (
                f"{i}. **{event['title']}**\n"
                f"üìÖ {event['date']}\n"
                f"üåç {event['location']}\n"
                f"üí∞ {event['cost']}\n"
                f"üìå {event['format']}\n"
                f"üîó {event['url']}\n\n"
            )
        keyboard = get_paginated_keyboard(len(events), page, subscription_id)

    try:
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
    except Exception as e:
        if "MESSAGE_TOO_LONG" in str(e):
            logger.error(f"Message too long even with pagination: {len(text)} characters")
            await callback.message.edit_text(
                "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.",
                reply_markup=get_main_menu_keyboard()
            )
            await callback.answer()
        else:
            raise
