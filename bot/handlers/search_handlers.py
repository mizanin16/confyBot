from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from bot.db.queries import get_filtered_events, get_user_filters, get_filter_details, get_filter_by_name
from bot.keyboards.inline_keyboards import get_main_menu_keyboard
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()


@router.callback_query(F.data == "search_events")
async def search_events_start(callback: types.CallbackQuery):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from bot.db.queries import get_user_subscriptions
    subscriptions = get_user_subscriptions(user_id)

    if not subscriptions:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏.",
            reply_markup=get_main_menu_keyboard()
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞
    keyboard = []
    for sub_id, sub_name in subscriptions:
        keyboard.append([
            InlineKeyboardButton(text=sub_name, callback_data=f"search_by_filter:{sub_id}")
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


@router.callback_query(F.data.startswith("search_by_filter:"))
async def search_with_filter(callback: types.CallbackQuery):
    """–ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É"""
    filter_id = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞
    filter_details = get_filter_details(filter_id)

    if not filter_details:
        await callback.message.edit_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_menu_keyboard()
        )
        return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º
    events = get_filtered_events(filter_details)

    if not events:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        filter_text = (
            f"üìã <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:</b>\n"
            f"üìú <b>–ó–∞–ø—Ä–æ—Å:</b> {filter_details['subscription_name']}\n"
            f"üåü <b>–¢–µ–º–∞—Ç–∏–∫–∞:</b> {filter_details['category']}\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {filter_details['date']}\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {filter_details['cost']}\n"
            f"üìå <b>–§–æ—Ä–º–∞—Ç:</b> {filter_details['format']}\n"
            f"üåç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {filter_details['location']}\n\n"
            f"üòï <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</b>"
        )

        keyboard = [
            [InlineKeyboardButton(text="üîé –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="search_events")],
            [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]

        await callback.message.edit_text(
            filter_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
        return

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await display_events(callback, events, filter_details)


async def display_events(callback: types.CallbackQuery, events: list, filter_details: dict):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    max_events_per_message = 5
    events_count = len(events)

    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
    header = (
        f"üìã <b>–ù–∞–π–¥–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:</b> {events_count}\n"
        f"üìú <b>–ó–∞–ø—Ä–æ—Å:</b> {filter_details['subscription_name']}\n"
        f"üåü <b>–¢–µ–º–∞—Ç–∏–∫–∞:</b> {filter_details['category']}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {filter_details['date']}\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {filter_details['cost']}\n"
        f"üìå <b>–§–æ—Ä–º–∞—Ç:</b> {filter_details['format']}\n"
        f"üåç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {filter_details['location']}\n\n"
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b>\n\n"
    )

    message_text = header

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ (–Ω–µ –±–æ–ª—å—à–µ max_events_per_message)
    events_to_show = events[:max_events_per_message]

    for i, event in enumerate(events_to_show, 1):
        event_text = (
            f"<b>{i}. {event['event_name']}</b>\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {event['event_date']}"
        )

        if event.get('event_time'):
            event_text += f" ‚è∞ {event['event_time']}"

        event_text += f"\nüìç <b>–ú–µ—Å—Ç–æ:</b> {event['location']}\n"

        if event.get('description'):
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
            description = event['description']
            if len(description) > 100:
                description = description[:97] + "..."
            event_text += f"üìù {description}\n"

        if event.get('cost'):
            event_text += f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {event['cost']}\n"

        if event.get('event_type'):
            event_text += f"üîç <b>–§–æ—Ä–º–∞—Ç:</b> {event['event_type']}\n"

        if event.get('event_link'):
            event_text += f"üîó <a href='{event['event_link']}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n"

        event_text += "\n"
        message_text += event_text

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = []

    # –ï—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
    if events_count > max_events_per_message:
        more_text = f"–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ ({events_count - max_events_per_message})"
        keyboard.append([
            InlineKeyboardButton(
                text=more_text,
                callback_data=f"more_events:{filter_details['subscription_name']}:{max_events_per_message}"
            )
        ])

    keyboard.append([InlineKeyboardButton(text="üîé –î—Ä—É–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="search_events")])
    keyboard.append([InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])

    await callback.message.edit_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML",
        disable_web_page_preview=True  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è —Å—Å—ã–ª–æ–∫
    )


@router.callback_query(F.data.startswith("more_events:"))
async def show_more_events(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –ø–æ—Ä—Ü–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    parts = callback.data.split(":")
    subscription_name = parts[1]
    offset = int(parts[2])

    filter_details = get_filter_by_name(callback.from_user.id, subscription_name)

    if not filter_details:
        await callback.message.edit_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_menu_keyboard()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º
    events = get_filtered_events(filter_details)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    max_events_per_message = 5
    total_events = len(events)

    if offset >= total_events:
        # –ï—Å–ª–∏ —Å–º–µ—â–µ–Ω–∏–µ –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
        await callback.answer("–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É —Å–ø–∏—Å–∫–∞.")
        await display_events(callback, events, filter_details)
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤ —Ç–µ–∫—É—â–µ–π –ø–æ—Ä—Ü–∏–∏
    events_to_show = events[offset:offset + max_events_per_message]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
    header = (
        f"üìã <b>–ù–∞–π–¥–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:</b> {total_events}\n"
        f"<b>–ü–æ–∫–∞–∑–∞–Ω—ã —Å–æ–±—ã—Ç–∏—è {offset + 1}-{min(offset + len(events_to_show), total_events)} –∏–∑ {total_events}</b>\n\n"
    )

    message_text = header

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
    for i, event in enumerate(events_to_show, offset + 1):
        event_text = (
            f"<b>{i}. {event['event_name']}</b>\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {event['event_date']}"
        )

        if event.get('event_time'):
            event_text += f" ‚è∞ {event['event_time']}"

        event_text += f"\nüìç <b>–ú–µ—Å—Ç–æ:</b> {event['location']}\n"

        if event.get('description'):
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
            description = event['description']
            if len(description) > 100:
                description = description[:97] + "..."
            event_text += f"üìù {description}\n"

        if event.get('cost'):
            event_text += f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {event['cost']}\n"

        if event.get('event_type'):
            event_text += f"üîç <b>–§–æ—Ä–º–∞—Ç:</b> {event['event_type']}\n"

        if event.get('event_link'):
            event_text += f"üîó <a href='{event['event_link']}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n"

        event_text += "\n"
        message_text += event_text

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation_row = []

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if offset > 0:
        new_offset = max(0, offset - max_events_per_message)
        navigation_row.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"more_events:{subscription_name}:{new_offset}"
            )
        )

    # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    if offset + max_events_per_message < total_events:
        new_offset = offset + max_events_per_message
        navigation_row.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=f"more_events:{subscription_name}:{new_offset}"
            )
        )

    if navigation_row:
        keyboard.append(navigation_row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton(text="üîé –î—Ä—É–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="search_events")])
    keyboard.append([InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])

    await callback.message.edit_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML",
        disable_web_page_preview=True
    )


def register_search_handlers(dp):
    dp.include_router(router)