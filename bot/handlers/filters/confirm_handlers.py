from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext

from bot.states.filter_states import FilterStates
from bot.db.queries import save_filters  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()

async def confirm_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –ë–î"""
    user_data = await state.get_data()
    user_id = callback.from_user.id

    subscription_name = user_data.get("question", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    date = user_data.get("date", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    cost = user_data.get("cost", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    format_ = user_data.get("format", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    location = user_data.get("geo", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    category = user_data.get("theme", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")

    save_filters(user_id, subscription_name, category, date, cost, format_, location)

    response_text = (
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
        f"üìú –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_name}\n"
        f"üåü –¢–µ–º–∞—Ç–∏–∫–∏: {category}\n"
        f"üìÖ –î–∞—Ç—ã: {date}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}\n"
        f"üìå –§–æ—Ä–º–∞—Ç: {format_}\n"
        f"üåç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}\n"
        "\n–§–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫."
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"),
        InlineKeyboardButton(text="–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="view_subscriptions")
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text(response_text, reply_markup=builder.as_markup())
    await state.clear()

def register_confirm_handlers(dp):
    dp.include_router(router)
