from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram_calendar.simple_calendar import SimpleCalendar, SimpleCalendarCallback
from datetime import datetime
from bot.states.filter_states import FilterStates
from bot.keyboards.inline_keyboards import get_cost_keyboard
from bot.handlers.filters.common import add_custom_input_button

router = Router()


@router.callback_query(FilterStates.date, F.data == "custom_input")
async def date_custom_input(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –≤—ã–±–æ—Ä –æ–¥–Ω–æ–π –¥–∞—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º"""
    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –±–µ–∑ –∫–Ω–æ–ø–æ–∫ today –∏ cancel
    calendar = SimpleCalendar()
    calendar.show_today_button = False
    calendar.show_cancel_button = False

    await callback.message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                                     reply_markup=await calendar.start_calendar())
    await state.set_state(FilterStates.date_custom)


@router.callback_query(FilterStates.date, F.data == "custom_range_input")
async def date_range_custom_input(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º"""
    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –±–µ–∑ –∫–Ω–æ–ø–æ–∫ today –∏ cancel
    calendar = SimpleCalendar()
    calendar.show_today_button = False
    calendar.show_cancel_button = False

    await callback.message.edit_text("üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É:",
                                     reply_markup=await calendar.start_calendar())
    await state.set_state(FilterStates.date_range_start)


@router.callback_query(SimpleCalendarCallback.filter(), FilterStates.date_custom)
@router.callback_query(SimpleCalendarCallback.filter(), FilterStates.date_range_start)
@router.callback_query(SimpleCalendarCallback.filter(), FilterStates.date_range_end)
async def process_calendar_interaction(callback: CallbackQuery, callback_data: SimpleCalendarCallback,
                                       state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã, –Ω–µ –ø–æ–∑–≤–æ–ª—è—è –≤—ã–±–∏—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã"""
    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –±–µ–∑ –∫–Ω–æ–ø–æ–∫ today –∏ cancel
    calendar = SimpleCalendar()
    calendar.show_today_button = False
    calendar.show_cancel_button = False

    selected, date = await calendar.process_selection(callback, callback_data)

    if selected:
        today = datetime.now()

        if date < today:
            await callback.answer("üö´ –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É! –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è.",
                                  show_alert=True)
            # ‚ùó –°–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            await callback.message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                                             reply_markup=await calendar.start_calendar())
            return

        if await state.get_state() == FilterStates.date_custom.state:
            selected_date = date.strftime("%d.%m.%Y")
            await state.update_data(date=selected_date)
            await callback.message.edit_text(
                f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {selected_date}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å:",
                reply_markup=add_custom_input_button(get_cost_keyboard())
            )
            await state.set_state(FilterStates.cost)

        elif await state.get_state() == FilterStates.date_range_start.state:
            await state.update_data(start_date=date)
            # –î–ª—è –≤—Ç–æ—Ä–æ–π –¥–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
            await callback.message.edit_text("üìÜ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É:",
                                             reply_markup=await calendar.start_calendar(year=date.year,
                                                                                        month=date.month))
            await state.set_state(FilterStates.date_range_end)

        elif await state.get_state() == FilterStates.date_range_end.state:
            data = await state.get_data()
            start_date = data.get("start_date")

            if start_date > date:
                await callback.answer("üö´ –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.",
                                      show_alert=True)
                # ‚ùó –°–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
                await callback.message.edit_text("üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É:",
                                                 reply_markup=await calendar.start_calendar(year=start_date.year,
                                                                                            month=start_date.month))
                return

            formatted_range = f"{start_date.strftime('%d.%m.%Y')} - {date.strftime('%d.%m.%Y')}"
            await state.update_data(date=formatted_range)

            await callback.message.edit_text(
                f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω: {formatted_range}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å:",
                reply_markup=add_custom_input_button(get_cost_keyboard())
            )
            await state.set_state(FilterStates.cost)