from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List


def create_inline_keyboard(
        items: List[str],
        callback_prefix: str,
        row_width: int = 2
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.

    :param items: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫
    :param callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback data
    :param row_width: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    :return: InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()
    for item in items:
        builder.add(InlineKeyboardButton(
            text=item,
            callback_data=f"{callback_prefix}:{item}"
        ))
    builder.adjust(row_width)
    return builder.as_markup()


def get_theme_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º–∞—Ç–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."""
    themes = [
        "–†–µ–∫–ª–∞–º–∞, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, PR",
        "IT, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
        "E-COM",
    ]
    builder = InlineKeyboardBuilder()
    for theme in themes:
        builder.button(text=theme, callback_data=f"theme:{theme}")
    builder.row(InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data="theme:–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"))
    return builder.as_markup()


def get_date_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."""
    builder = InlineKeyboardBuilder()

    builder.button(text="üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data="custom_input")
    builder.button(text="üìÜ –í—ã–±—Ä–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω", callback_data="custom_range_input")
    builder.button(text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ", callback_data="date:–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ")

    builder.adjust(1)  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    return builder.as_markup()


def get_geo_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."""
    locations = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ"]
    return create_inline_keyboard(locations, "geo")


def get_cost_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."""
    cost_filters = [
        "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ",
        "–î–æ 10.000 —Ä—É–±–ª–µ–π",
        "–û—Ç 10.000 —Ä—É–±–ª–µ–π",
        "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ"
    ]
    return create_inline_keyboard(cost_filters, "cost")


def get_format_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."""
    formats = ["–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ", "–¢–æ–ª—å–∫–æ –æ—Ñ–ª–∞–π–Ω", "–¢–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω"]
    return create_inline_keyboard(formats, "format")


def get_subscriptions_keyboard(subscriptions):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
    keyboard = []
    for sub_id, sub_name in subscriptions:
        keyboard.append([
            InlineKeyboardButton(text=sub_name, callback_data=f"delete_sub:{sub_id}")
        ])
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_main_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìå –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="add_subscription")],
        [InlineKeyboardButton(text="üìú –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="view_subscriptions")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", callback_data="search_events")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
    ])
